[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "skyward-assistable-bundle"
version = "1.0.0"
description = "Langflow bundle for Assistable AI and GoHighLevel integration with agent delegation"
readme = "README.md"
authors = [
    {name = "Skyward Prompted", email = "support@skywardprompted.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
    "Topic :: Office/Business :: Groupware",
]
keywords = ["langflow", "ai", "assistable", "gohighlevel", "crm", "automation"]
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.24.0",
    "cryptography>=3.4.8", 
    "email-validator>=1.1.0",
    "phonenumbers>=8.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
redis = ["redis>=4.0.0"]
all = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "redis>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/promptedForge/flow-bundles"
Repository = "https://github.com/promptedForge/flow-bundles.git"
Documentation = "https://github.com/promptedForge/flow-bundles/tree/main/skyward_assistable_bundle/docs"
"Bug Reports" = "https://github.com/promptedForge/flow-bundles/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["components*", "config*", "utils*"]
exclude = ["tests*", "scripts*", "docs*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=components",
    "--cov=config", 
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html:coverage_html",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "api: API tests requiring external services",
    "slow: Slow tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["components", "config", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.langflow]
bundle_name = "skyward_assistable_bundle"
bundle_version = "1.0.0"
bundle_description = "Assistable AI and GoHighLevel integration with agent delegation"
components_path = "components"
flows_path = "flows"
docs_path = "docs"
